---
import Layout from '../../layouts/Layout.astro';
import { requireAdmin } from '../../middleware/auth';
import { PrismaClient } from '@prisma/client';

const user = await requireAdmin(Astro);
const prisma = new PrismaClient();

let users = [];
try {
  users = await prisma.user.findMany({
    orderBy: { name: 'asc' },
    select: {
      id: true,
      name: true,
      email: true,
      role: true,
      _count: {
        select: {
          posts: true
        }
      }
    }
  });
} finally {
  await prisma.$disconnect();
}
---

<Layout title="User Management">
  <div class="min-h-screen bg-[#1e1e2e] py-12">
    <div class="max-w-[95%] mx-auto">
      <div class="mb-16">
        <div class="flex items-center justify-between mb-8">
          <h1 class="text-3xl font-bold">
            <span class="text-[#cba6f7]">class</span>
            <span class="text-[#89b4fa]">UserManagement</span>
            <span class="text-[#6c7086]">{</span>
          </h1>
        </div>

        <!-- Users Table -->
        <div class="bg-[#181825] rounded-lg border border-[#313244] overflow-hidden">
          <div class="p-6">
            <h2 class="text-xl font-mono mb-6">
              <span class="text-[#cba6f7]">get</span>
              <span class="text-[#89b4fa]">AllUsers</span>
              <span class="text-[#6c7086]">()</span>
            </h2>
            
            <div class="overflow-x-auto">
              <table class="w-full table-fixed">
                <thead>
                  <tr class="border-b border-[#313244] text-left">
                    <th class="w-1/5 pb-4 text-[#6c7086] font-mono">Name</th>
                    <th class="w-1/5 pb-4 text-[#6c7086] font-mono">Email</th>
                    <th class="w-1/5 pb-4 text-[#6c7086] font-mono">Role</th>
                    <th class="w-1/5 pb-4 text-[#6c7086] font-mono">Posts</th>
                    <th class="w-1/5 pb-4 text-[#6c7086] font-mono text-right">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((user) => (
                    <tr class="border-b border-[#313244] last:border-0">
                      <td class="py-4 text-[#cdd6f4]">{user.name}</td>
                      <td class="py-4 text-[#a6e3a1]">{user.email}</td>
                      <td class="py-4">
                        <div class="relative w-32">
                          <select
                            data-user-id={user.id}
                            class="w-full bg-[#11111b] text-[#cdd6f4] border border-[#313244] rounded-md pl-3 pr-8 py-1 text-sm role-select"
                            style="-webkit-appearance: none; -moz-appearance: none; appearance: none;"
                          >
                            <option value="USER" selected={user.role === 'USER'}>USER</option>
                            <option value="ADMIN" selected={user.role === 'ADMIN'}>ADMIN</option>
                          </select>
                          <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-[#6c7086]">
                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                              <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                            </svg>
                          </div>
                        </div>
                      </td>
                      <td class="py-4 text-[#6c7086]">{user._count.posts} posts</td>
                      <td class="py-4 text-right">
                        <button
                          data-user-id={user.id}
                          class="text-[#f38ba8] hover:text-[#f38ba8]/80 transition-colors duration-200 delete-user-btn"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Add custom scrollbar styles */
  .overflow-x-auto::-webkit-scrollbar {
    height: 8px;
  }

  .overflow-x-auto::-webkit-scrollbar-track {
    background: #181825;
    border-radius: 4px;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb {
    background: #313244;
    border-radius: 4px;
  }

  .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: #45475a;
  }
</style>

<script>
  // Handle role changes
  document.querySelectorAll('.role-select').forEach(select => {
    select.addEventListener('change', async (event) => {
      const userId = select.getAttribute('data-user-id');
      const newRole = select.value;
      
      if (!confirm(`Are you sure you want to change this user's role to ${newRole}?`)) {
        // Reset to previous value if cancelled
        select.value = select.getAttribute('data-original-role');
        return;
      }
      
      try {
        const response = await fetch(`/api/users/${userId}/role`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ role: newRole })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Store new role as original
          select.setAttribute('data-original-role', newRole);
          
          // Optional: Show success message
          const successMessage = document.createElement('div');
          successMessage.textContent = 'Role updated successfully';
          successMessage.className = 'text-[#a6e3a1] text-sm mt-1';
          select.parentNode.appendChild(successMessage);
          setTimeout(() => successMessage.remove(), 3000);
        } else {
          throw new Error(data.error || 'Failed to update user role');
        }
      } catch (error) {
        console.error('Error updating user role:', error);
        alert(error.message || 'Failed to update user role');
        // Reset to previous value on error
        select.value = select.getAttribute('data-original-role');
      }
    });
    
    // Store original role for reset on cancel/error
    select.setAttribute('data-original-role', select.value);
  });

  // Handle user deletion
  document.querySelectorAll('.delete-user-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const userId = button.getAttribute('data-user-id');
      if (!confirm('Are you sure you want to delete this user? This action cannot be undone.')) return;
      
      try {
        const response = await fetch(`/api/users/${userId}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          // Reload the page to reflect changes
          window.location.reload();
        } else {
          const data = await response.json();
          alert(data.error || 'Failed to delete user');
        }
      } catch (error) {
        console.error('Error deleting user:', error);
        alert('Failed to delete user');
      }
    });
  });
</script>
