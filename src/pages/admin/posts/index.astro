---
import Layout from '../../../layouts/Layout.astro';
import { requireAdmin } from '../../../middleware/auth';
import { PrismaClient } from '@prisma/client';

// Check admin permissions
const user = await requireAdmin(Astro);
if (user instanceof Response) return user;

const prisma = new PrismaClient();
const allPosts = await prisma.post.findMany({
  orderBy: [
    { archived: 'asc' },
    { createdAt: 'desc' }
  ],
  include: { author: { select: { name: true } } },
});

// Separate posts into active and archived
const activePosts = allPosts.filter(post => !post.archived);
const archivedPosts = allPosts.filter(post => post.archived);

await prisma.$disconnect();
---

<Layout title="Manage Posts">
  <div class="max-w-6xl mx-auto px-4 py-8">
    <div class="font-mono">
      <div class="text-[#6c7086]">// Posts Management</div>
      <div class="text-xl">
        <span class="text-[#cba6f7]">class</span>
        <span class="text-[#89b4fa]">PostsManager</span>
        <span class="text-[#6c7086]"> {</span>
      </div>
    </div>

    <div class="flex justify-end mt-6">
      <a
        href="/admin/posts/new"
        class="font-mono text-[#89b4fa] hover:text-[#b4befe] transition-colors"
      >
        createNewPost()
      </a>
    </div>

    <!-- Active Posts -->
    <div class="mt-6">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-mono text-[#cdd6f4]">Active Posts</h2>
      </div>
      <div class="bg-[#181825] rounded-lg border border-[#313244]">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-[#313244]">
            <thead class="bg-[#11111b]">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[35%]">Title</th>
                <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[15%]">Author</th>
                <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[20%]">Status</th>
                <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[30%]">Actions</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-[#313244]" id="activePostsTable">
              {activePosts.map((post) => (
                <tr class="hover:bg-[#11111b] transition-colors">
                  <td class="px-6 py-4 font-mono">
                    <span class="text-[#89b4fa]">{post.title}</span>
                  </td>
                  <td class="px-6 py-4 font-mono">
                    <span class="text-[#a6e3a1]">{post.author.name}</span>
                  </td>
                  <td class="px-6 py-4 font-mono whitespace-nowrap">
                    <span class={`text-${post.published ? '[#a6e3a1]' : '[#f9e2af]'}`}>
                      {post.published ? 'Published' : 'Draft'}
                    </span>
                  </td>
                  <td class="px-6 py-4 font-mono">
                    <div class="flex items-center gap-3 min-w-[400px]">
                      <button
                        type="button"
                        data-action="publish"
                        data-post-id={post.id}
                        data-published={post.published.toString()}
                        class="bg-[#181825] border border-[#313244] hover:border-[#89b4fa] px-4 py-2 rounded transition-colors min-w-[100px] text-center"
                      >
                        {post.published ? 'unpublish()' : 'publish()'}
                      </button>
                      <button
                        type="button"
                        data-action="archive"
                        data-post-id={post.id}
                        data-archived={post.archived.toString()}
                        class="bg-[#181825] border border-[#313244] hover:border-[#89b4fa] px-4 py-2 rounded transition-colors min-w-[90px] text-center"
                      >
                        archive()
                      </button>
                      <a
                        href={`/admin/posts/edit/${post.id}`}
                        class="bg-[#181825] border border-[#313244] hover:border-[#89b4fa] px-4 py-2 rounded transition-colors min-w-[70px] text-center"
                      >
                        edit()
                      </a>
                      <button
                        type="button"
                        data-action="delete"
                        data-post-id={post.id}
                        class="bg-[#181825] border border-[#f38ba8] text-[#f38ba8] hover:bg-[#f38ba8] hover:text-[#11111b] px-4 py-2 rounded transition-all min-w-[80px] text-center"
                      >
                        delete()
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Archived Posts -->
    {archivedPosts.length > 0 && (
      <div class="mt-12">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-mono text-[#cdd6f4]">Archived Posts</h2>
        </div>
        <div class="bg-[#181825] rounded-lg border border-[#313244]">
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-[#313244]">
              <thead class="bg-[#11111b]">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[35%]">Title</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[15%]">Author</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[20%]">Status</th>
                  <th class="px-6 py-3 text-left text-xs font-mono text-[#6c7086] uppercase w-[30%]">Actions</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-[#313244]" id="archivedPostsTable">
                {archivedPosts.map((post) => (
                  <tr class="hover:bg-[#11111b] transition-colors">
                    <td class="px-6 py-4 font-mono">
                      <span class="text-[#89b4fa]">{post.title}</span>
                    </td>
                    <td class="px-6 py-4 font-mono">
                      <span class="text-[#a6e3a1]">{post.author.name}</span>
                    </td>
                    <td class="px-6 py-4 font-mono whitespace-nowrap">
                      <div class="flex items-center space-x-2">
                        <span class={`text-${post.published ? '[#a6e3a1]' : '[#f9e2af]'}`}>
                          {post.published ? 'Published' : 'Draft'}
                        </span>
                        <span class="text-[#f38ba8]">â€¢ Archived</span>
                      </div>
                    </td>
                    <td class="px-6 py-4 font-mono">
                      <div class="flex items-center gap-3 min-w-[400px]">
                        <button
                          type="button"
                          data-action="publish"
                          data-post-id={post.id}
                          data-published={post.published.toString()}
                          class="bg-[#181825] border border-[#313244] hover:border-[#89b4fa] px-4 py-2 rounded transition-colors min-w-[100px] text-center"
                        >
                          {post.published ? 'unpublish()' : 'publish()'}
                        </button>
                        <button
                          type="button"
                          data-action="archive"
                          data-post-id={post.id}
                          data-archived={post.archived.toString()}
                          class="bg-[#181825] border border-[#313244] hover:border-[#89b4fa] px-4 py-2 rounded transition-colors min-w-[90px] text-center"
                        >
                          unarchive()
                        </button>
                        <a
                          href={`/admin/posts/edit/${post.id}`}
                          class="bg-[#181825] border border-[#313244] hover:border-[#89b4fa] px-4 py-2 rounded transition-colors min-w-[70px] text-center"
                        >
                          edit()
                        </a>
                        <button
                          type="button"
                          data-action="delete"
                          data-post-id={post.id}
                          class="bg-[#181825] border border-[#f38ba8] text-[#f38ba8] hover:bg-[#f38ba8] hover:text-[#11111b] px-4 py-2 rounded transition-all min-w-[80px] text-center"
                        >
                          delete()
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  async function refreshPage() {
    window.location.reload();
  }

  // Handle post actions (publish/unpublish, archive/unarchive, delete)
  document.addEventListener('click', async (e) => {
    const button = e.target.closest('button[data-action]');
    if (!button) return;

    const action = button.dataset.action;
    const postId = button.dataset.postId;
    
    if (!postId) {
      console.error('No post ID found');
      return;
    }

    try {
      if (action === 'delete') {
        if (!confirm('Are you sure you want to delete this post?')) {
          return;
        }

        const response = await fetch(`/api/posts/${postId}`, {
          method: 'DELETE',
          credentials: 'include'
        });

        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.error || 'Failed to delete post');
        }

        await refreshPage();
      } else if (action === 'publish' || action === 'archive') {
        // Get current state from data attribute
        const stateAttr = action === 'publish' ? 'published' : 'archived';
        const currentState = button.dataset[stateAttr] === 'true';
        
        console.log(`Action: ${action}`);
        console.log(`State attribute: ${stateAttr}`);
        console.log(`Current state: ${currentState}`);
        console.log(`Button dataset:`, button.dataset);

        // Create request body with the action as the key
        const requestBody = {
          [action === 'publish' ? 'publish' : 'archive']: !currentState
        };
        
        console.log('Request body:', requestBody);

        const response = await fetch(`/api/posts/${postId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify(requestBody)
        });

        console.log('Response status:', response.status);
        const responseData = await response.json();
        console.log('Response data:', responseData);

        if (!response.ok) {
          throw new Error(responseData.error || `Failed to ${action} post`);
        }

        await refreshPage();
      }
    } catch (error) {
      console.error('Error:', error);
      alert(error instanceof Error ? error.message : `Failed to ${action} post`);
    }
  });
</script>
